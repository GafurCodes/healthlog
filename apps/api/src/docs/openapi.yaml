openapi: 3.0.3
info:
  title: HealthLog API
  description: RESTful API for daily wellness tracking (meals, workouts, sleep)
  version: 1.0.0
  contact:
    name: HealthLog Support
    email: support@healthlog.app

servers:
  - url: http://localhost:4000/api
    description: Local development server
  - url: https://api.healthlog.app/api
    description: Production server

tags:
  - name: Authentication
    description: User authentication and account management
  - name: Logs
    description: Wellness log management (CRUD and search)

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: ObjectId
        email:
          type: string
          format: email
        name:
          type: string
        emailVerified:
          type: boolean

    Tokens:
      type: object
      properties:
        accessToken:
          type: string
          description: JWT access token (short-lived)
        refreshToken:
          type: string
          description: JWT refresh token (long-lived)

    AuthResponse:
      type: object:
        user:
          $ref: '#/components/schemas/User'
        tokens:
          $ref: '#/components/schemas/Tokens'

    MealMetrics:
      type: object
      properties:
        calories:
          type: number
          minimum: 0
        carbs:
          type: number
          minimum: 0
        protein:
          type: number
          minimum: 0
        fat:
          type: number
          minimum: 0
        notes:
          type: string

    WorkoutMetrics:
      type: object
      properties:
        duration:
          type: number
          minimum: 0
          description: Duration in minutes
        type:
          type: string
          enum: [cardio, strength, flexibility]
        intensity:
          type: string
          enum: [low, moderate, high]
        notes:
          type: string

    SleepMetrics:
      type: object
      properties:
        duration:
          type: number
          minimum: 0
          description: Duration in minutes
        quality:
          type: number
          minimum: 1
          maximum: 10
          description: Sleep quality rating (1-10)
        notes:
          type: string

    Log:
      type: object
      properties:
        _id:
          type: string
          format: ObjectId
        userId:
          type: string
          format: ObjectId
        type:
          type: string
          enum: [meal, workout, sleep]
        metrics:
          oneOf:
            - $ref: '#/components/schemas/MealMetrics'
            - $ref: '#/components/schemas/WorkoutMetrics'
            - $ref: '#/components/schemas/SleepMetrics'
        date:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    PaginatedLogs:
      type: object
      properties:
        logs:
          type: array
          items:
            $ref: '#/components/schemas/Log'
        pagination:
          type: object
          properties:
            page:
              type: integer
              minimum: 1
            pageSize:
              type: integer
              minimum: 1
            total:
              type: integer
              minimum: 0
            totalPages:
              type: integer
              minimum: 0

    Error:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        details:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              message:
                type: string

paths:
  /health:
    get:
      tags:
        - Health
      summary: Health check endpoint
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: boolean
                  message:
                    type: string

  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - name
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 8
                  pattern: ^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)
                  description: Must contain uppercase, lowercase, and number
                name:
                  type: string
                  minLength: 2
      responses:
        '201':
          description: Registration successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials or unverified email
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/verify-email:
    post:
      tags:
        - Authentication
      summary: Verify email address
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
      responses:
        '200':
          description: Email verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/forgot-password:
    post:
      tags:
        - Authentication
      summary: Request password reset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
      responses:
        '200':
          description: Reset email sent (if account exists)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /auth/reset-password:
    post:
      tags:
        - Authentication
      summary: Reset password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
                - password
              properties:
                token:
                  type: string
                password:
                  type: string
                  minLength: 8
                  pattern: ^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)
      responses:
        '200':
          description: Password reset successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/refresh:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid or expired refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /logs:
    get:
      tags:
        - Logs
      summary: Search and list logs with pagination
      security:
        - BearerAuth: []
      parameters:
        - name: type
          in: query
          schema:
            type: string
            enum: [meal, workout, sleep]
        - name: startDate
          in: query
          schema:
            type: string
            format: date-time
        - name: endDate
          in: query
          schema:
            type: string
            format: date-time
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: pageSize
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: Logs retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedLogs'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags:
        - Logs
      summary: Create a new log
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - type
                - metrics
              properties:
                type:
                  type: string
                  enum: [meal, workout, sleep]
                metrics:
                  oneOf:
                    - $ref: '#/components/schemas/MealMetrics'
                    - $ref: '#/components/schemas/WorkoutMetrics'
                    - $ref: '#/components/schemas/SleepMetrics'
                date:
                  type: string
                  format: date-time
      responses:
        '201':
          description: Log created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Log'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /logs/{id}:
    get:
      tags:
        - Logs
      summary: Get a single log by ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: ObjectId
      responses:
        '200':
          description: Log retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Log'
        '404':
          description: Log not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      tags:
        - Logs
      summary: Update a log
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: ObjectId
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  enum: [meal, workout, sleep]
                metrics:
                  oneOf:
                    - $ref: '#/components/schemas/MealMetrics'
                    - $ref: '#/components/schemas/WorkoutMetrics'
                    - $ref: '#/components/schemas/SleepMetrics'
                date:
                  type: string
                  format: date-time
      responses:
        '200':
          description: Log updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Log'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Log not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    delete:
      tags:
        - Logs
      summary: Delete a log
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: ObjectId
      responses:
        '204':
          description: Log deleted successfully
        '404':
          description: Log not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
